{"code":"// Utility function to generate a random number between 0 and 1\nfunction random() {\n    return Math.random();\n}\n// Utility function to generate a random whole number between 0 and n\nfunction randomN(n) {\n    return Math.floor(Math.random() * (n + 1));\n}\n// Utility function to generate a random whole number between n and o\nfunction randomNtoO(n, o) {\n    return Math.floor(Math.random() * (o - n + 1) + n);\n}\n// Utility function to simulate a die roll with x sides\nfunction die(x) {\n    if (x <= 0) {\n        throw new Error(\"x must be greater than 0\");\n    }\n    return Math.floor(Math.random() * x) + 1;\n}\n// Function to shuffle an array\nfunction shuffle(arr) {\n    var _a;\n    var array = arr.slice(); // Create a copy of the array\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        _a = [array[j], array[i]], array[i] = _a[0], array[j] = _a[1]; // Swap elements\n    }\n    return array;\n}\n// Function to simulate a coin flip with a given probability t\nfunction flip(t) {\n    if (t === void 0) { t = 0.5; }\n    if (t > 1 || t < 0) {\n        throw new Error(\"Only values between 0 and 1 are allowed\");\n    }\n    return Math.random() < t;\n}\n// Function to roll dice based on a description string\nfunction dieRoll(desc) {\n    // Regular expression to match dice roll patterns (XdY, XdY+Z, XdY-Z, dY)\n    var regex = /(\\d*)d(\\d+)([+-]\\d+)?/g;\n    var total = 0; // Total sum of dice rolls and modifiers\n    var match;\n    var hasDice = false; // Flag to check if any dice are present\n    // While there are matches in the string\n    while ((match = regex.exec(desc)) !== null) {\n        hasDice = true; // Set flag to true if any dice are matched\n        var numberOfDice = match[1] === \"\" ? 1 : parseInt(match[1], 10); // Default to 1 if no number before \"d\"\n        var numberOfSides = parseInt(match[2], 10); // Number of sides on the dice\n        var modifier = match[3] ? parseInt(match[3], 10) : 0; // Optional modifier (e.g., +2 or -3)\n        // Roll the dice the specified number of times and sum the results\n        var rollTotal = 0;\n        for (var i = 0; i < numberOfDice; i++) {\n            rollTotal += Math.floor(Math.random() * numberOfSides) + 1; // Roll each die (1 to numberOfSides)\n        }\n        // Add the modifier to the dice total\n        total += rollTotal + modifier;\n    }\n    // Handle cases where no dice were matched, but there is a static value\n    if (!hasDice) {\n        // Match static values at the end of the string\n        var staticValueMatch = desc.match(/([+-]?\\d+)$/);\n        if (staticValueMatch) {\n            total = parseInt(staticValueMatch[1], 10);\n        }\n    }\n    return total;\n}\n// Export functions for use in other modules\nexport { random, randomN, randomNtoO, die, shuffle, flip, dieRoll };\n","references":[],"dts":{"name":"/Users/dominic/Desktop/Applied Computer Science/ACS-3310/RandomLib/dist/types/index.d.ts","writeByteOrderMark":false,"text":"declare function random(): number;\ndeclare function randomN(n: number): number;\ndeclare function randomNtoO(n: number, o: number): number;\ndeclare function die(x: number): number;\ndeclare function shuffle<T>(arr: T[]): T[];\ndeclare function flip(t?: number): boolean;\ndeclare function dieRoll(desc: string): number;\nexport { random, randomN, randomNtoO, die, shuffle, flip, dieRoll };\n"}}
